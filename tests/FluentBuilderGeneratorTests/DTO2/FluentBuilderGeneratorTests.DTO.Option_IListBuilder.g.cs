//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.8.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class IListOptionBuilder : Builder<IList<FluentBuilderGeneratorTests.DTO.Option>>
    {
        private readonly Lazy<List<FluentBuilderGeneratorTests.DTO.Option>> _list = new Lazy<List<FluentBuilderGeneratorTests.DTO.Option>>(() => new List<FluentBuilderGeneratorTests.DTO.Option>());
        public IListOptionBuilder Add(Option item) => Add(() => item);
        public IListOptionBuilder Add(Func<Option> func)
        {
            _list.Value.Add(func());
            return this;
        }
        public IListOptionBuilder Add(Action<FluentBuilderGeneratorTests.DTO2.MyOptionBuilder> action, bool useObjectInitializer = true)
        {
            var builder = new FluentBuilderGeneratorTests.DTO2.MyOptionBuilder();
            action(builder);
            Add(() => builder.Build(useObjectInitializer));
            return this;
        }


        public override IList<FluentBuilderGeneratorTests.DTO.Option> Build() => Build(true);

        public override IList<FluentBuilderGeneratorTests.DTO.Option> Build(bool useObjectInitializer)
        {
            if (Instance?.IsValueCreated != true)
            {
                Instance = new Lazy<IList<FluentBuilderGeneratorTests.DTO.Option>>(() =>
                {
                    return _list.Value;
                });
            }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

    }
}
#nullable disable