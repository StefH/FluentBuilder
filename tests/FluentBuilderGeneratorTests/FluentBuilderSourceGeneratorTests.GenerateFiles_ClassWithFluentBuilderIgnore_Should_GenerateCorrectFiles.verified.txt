{
  HintName: FluentBuilderGeneratorTests.DTO.ClassWithFluentBuilderIgnoreBuilder.g.cs,
  Source:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.7.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ClassWithFluentBuilderIgnoreBuilder : Builder<FluentBuilderGeneratorTests.DTO.ClassWithFluentBuilderIgnore>
    {
        private bool _idIsSet;
        private Lazy<int> _id = new Lazy<int>(() => default(int));
        public ClassWithFluentBuilderIgnoreBuilder WithId(int value) => WithId(() => value);
        public ClassWithFluentBuilderIgnoreBuilder WithId(Func<int> func)
        {
            _id = new Lazy<int>(func);
            _idIsSet = true;
            return this;
        }
        public ClassWithFluentBuilderIgnoreBuilder WithoutId()
        {
            WithId(() => default(int));
            _idIsSet = false;
            return this;
        }


        private bool _Constructor1291238155_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.ClassWithFluentBuilderIgnore> _Constructor1291238155 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithFluentBuilderIgnore>(() => new FluentBuilderGeneratorTests.DTO.ClassWithFluentBuilderIgnore());
        public ClassWithFluentBuilderIgnoreBuilder UsingConstructor()
        {
            _Constructor1291238155 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithFluentBuilderIgnore>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.ClassWithFluentBuilderIgnore
                (

                );
            });
            _Constructor1291238155_IsSet = true;

            return this;
        }


        public override ClassWithFluentBuilderIgnore Build() => Build(true);

        public override ClassWithFluentBuilderIgnore Build(bool useObjectInitializer)
        {
            if (Instance?.IsValueCreated != true)
            {
                Instance = new Lazy<ClassWithFluentBuilderIgnore>(() =>
                {
                    ClassWithFluentBuilderIgnore instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassWithFluentBuilderIgnore
                        {
                            Id = _id.Value
                        };

                        return instance;
                    }

                    if (_Constructor1291238155_IsSet) { instance = _Constructor1291238155.Value; }
                    else { instance = Default(); }

                    if (_idIsSet) { instance.Id = _id.Value; }

                    return instance;
                });
            }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static ClassWithFluentBuilderIgnore Default() => new ClassWithFluentBuilderIgnore();

    }
}
#nullable disable
}