//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilder
{
    public partial class AddressBuilder : Builder<Address>
    {
        private bool _houseNumberIsSet;
        private Lazy<int> _houseNumber = new Lazy<int>(() => default(int));
        public AddressBuilder WithHouseNumber(int value) => WithHouseNumber(() => value);
        public AddressBuilder WithHouseNumber(Func<int> func)
        {
            _houseNumber = new Lazy<int>(func);
            _houseNumberIsSet = true;
            return this;
        }
        public AddressBuilder WithoutHouseNumber()
        {
            WithHouseNumber(() => default(int));
            _houseNumberIsSet = false;
            return this;
        }

        private bool _cityIsSet;
        private Lazy<string> _city = new Lazy<string>(() => default(string));
        public AddressBuilder WithCity(string value) => WithCity(() => value);
        public AddressBuilder WithCity(Func<string> func)
        {
            _city = new Lazy<string>(func);
            _cityIsSet = true;
            return this;
        }
        public AddressBuilder WithoutCity()
        {
            WithCity(() => default(string));
            _cityIsSet = false;
            return this;
        }

        private bool _arrayIsSet;
        private Lazy<string[]> _array = new Lazy<string[]>(() => default(string[]));
        public AddressBuilder WithArray(string[] value) => WithArray(() => value);
        public AddressBuilder WithArray(Func<string[]> func)
        {
            _array = new Lazy<string[]>(func);
            _arrayIsSet = true;
            return this;
        }
        public AddressBuilder WithArray(Action<FluentBuilder.IEnumerableBuilder<String>> action, bool useObjectInitializer = true) => WithArray(() =>
        {
            var builder = new FluentBuilder.IEnumerableBuilder<String>();
            action(builder);
            return builder.Build(useObjectInitializer);
        });
        public AddressBuilder WithoutArray()
        {
            WithArray(() => default(string[]));
            _arrayIsSet = false;
            return this;
        }

        private bool _iListAddressIsSet;
        private Lazy<System.Collections.Generic.IList<FluentBuilderGeneratorTests.DTO.Address>> _iListAddress = new Lazy<System.Collections.Generic.IList<FluentBuilderGeneratorTests.DTO.Address>>(() => default(System.Collections.Generic.IList<FluentBuilderGeneratorTests.DTO.Address>));
        public AddressBuilder WithIListAddress(System.Collections.Generic.IList<FluentBuilderGeneratorTests.DTO.Address> value) => WithIListAddress(() => value);
        public AddressBuilder WithIListAddress(Func<System.Collections.Generic.IList<FluentBuilderGeneratorTests.DTO.Address>> func)
        {
            _iListAddress = new Lazy<System.Collections.Generic.IList<FluentBuilderGeneratorTests.DTO.Address>>(func);
            _iListAddressIsSet = true;
            return this;
        }
        public AddressBuilder WithIListAddress(Action<FluentBuilder.IEnumerableAddressBuilder> action, bool useObjectInitializer = true) => WithIListAddress(() =>
        {
            var builder = new FluentBuilder.IEnumerableAddressBuilder();
            action(builder);
            return builder.Build(useObjectInitializer);
        });
        public AddressBuilder WithoutIListAddress()
        {
            WithIListAddress(() => default(System.Collections.Generic.IList<FluentBuilderGeneratorTests.DTO.Address>));
            _iListAddressIsSet = false;
            return this;
        }


        public override Address Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<Address>(() =>
                {
                    if (useObjectInitializer)
                    {
                        return new Address
                        {
                            HouseNumber = _houseNumber.Value,
                            City = _city.Value,
                            Array = _array.Value,
                            IListAddress = _iListAddress.Value
                        };
                    }

                    var instance = new Address();
                    if (_houseNumberIsSet) { instance.HouseNumber = _houseNumber.Value; }
                    if (_cityIsSet) { instance.City = _city.Value; }
                    if (_arrayIsSet) { instance.Array = _array.Value; }
                    if (_iListAddressIsSet) { instance.IListAddress = _iListAddress.Value; }
                    return instance;
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static Address Default() => new Address();

    }
}
#nullable disable