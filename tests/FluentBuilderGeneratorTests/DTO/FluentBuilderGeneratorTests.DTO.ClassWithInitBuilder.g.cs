//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.7.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ClassWithInitBuilder : Builder<FluentBuilderGeneratorTests.DTO.ClassWithInit>
    {
        private bool _normalIsSet;
        private Lazy<string> _normal = new Lazy<string>(() => string.Empty);
        public ClassWithInitBuilder WithNormal(string value) => WithNormal(() => value);
        public ClassWithInitBuilder WithNormal(Func<string> func)
        {
            _normal = new Lazy<string>(func);
            _normalIsSet = true;
            return this;
        }

        private bool _Constructor_92937217_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.ClassWithInit> _Constructor_92937217 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithInit>(() => new FluentBuilderGeneratorTests.DTO.ClassWithInit());
        public ClassWithInitBuilder UsingConstructor()
        {
            _Constructor_92937217 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithInit>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.ClassWithInit
                (

                );
            });
            _Constructor_92937217_IsSet = true;

            return this;
        }


        public override ClassWithInit Build() => Build(true);

        public override ClassWithInit Build(bool useObjectInitializer)
        {
            if (Instance?.IsValueCreated != true)
            {
                Instance = new Lazy<ClassWithInit>(() =>
                {
                    ClassWithInit instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassWithInit
                        {
                            Normal = _normal.Value
                        };

                        return instance;
                    }

                    if (_Constructor_92937217_IsSet) { instance = _Constructor_92937217.Value; }
                    else { instance = Default(); }

                    if (_normalIsSet) { instance.Normal = _normal.Value; }

                    return instance;
                });
            }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static ClassWithInit Default() => new ClassWithInit();

    }
}
#nullable disable