//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.11.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public static partial class MyInternalClassBuilderExtensions
    {
        internal static MyInternalClassBuilder AsBuilder(this FluentBuilderGeneratorTests.DTO.InternalClass instance)
        {
            return new MyInternalClassBuilder().UsingInstance(instance);
        }
    }

    internal partial class MyInternalClassBuilder : Builder<FluentBuilderGeneratorTests.DTO.InternalClass>
    {
        private bool _idIsSet;
        private Lazy<int> _id = new Lazy<int>(() => default(int));
        public MyInternalClassBuilder WithId(int value) => WithId(() => value);
        public MyInternalClassBuilder WithId(Func<int> func)
        {
            _id = new Lazy<int>(func);
            _idIsSet = true;
            return this;
        }

        private bool _Constructor_1847127841_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.InternalClass> _Constructor_1847127841 = new Lazy<FluentBuilderGeneratorTests.DTO.InternalClass>(() => new FluentBuilderGeneratorTests.DTO.InternalClass());
        public MyInternalClassBuilder UsingConstructor()
        {
            _Constructor_1847127841 = new Lazy<FluentBuilderGeneratorTests.DTO.InternalClass>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.InternalClass
                (

                );
            });
            _Constructor_1847127841_IsSet = true;

            return this;
        }


        public MyInternalClassBuilder UsingInstance(InternalClass value) => UsingInstance(() => value);

        public MyInternalClassBuilder UsingInstance(Func<InternalClass> func)
        {
            Instance = new Lazy<InternalClass>(func);
            return this;
        }

        public override InternalClass Build() => Build(true);

        public override InternalClass Build(bool useObjectInitializer)
        {
            if (Instance is null)
            {
                Instance = new Lazy<InternalClass>(() =>
                {
                    InternalClass instance;
                    if (useObjectInitializer)
                    {
                        instance = new InternalClass
                        {
                            Id = _id.Value
                        };

                        return instance;
                    }

                    if (_Constructor_1847127841_IsSet) { instance = _Constructor_1847127841.Value; }
                    else { instance = Default(); }

                    return instance;
                });
            }

            if (_idIsSet) { Instance.Value.Id = _id.Value; }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static InternalClass Default() => new InternalClass();

    }
}
#nullable disable