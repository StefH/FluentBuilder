//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.7.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ThingWithOnlyParameterizedConstructorBuilder : Builder<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructor>
    {
        private bool _xIsSet;
        private Lazy<int> _x = new Lazy<int>(() => default(int));
        public ThingWithOnlyParameterizedConstructorBuilder WithX(int value) => WithX(() => value);
        public ThingWithOnlyParameterizedConstructorBuilder WithX(Func<int> func)
        {
            _x = new Lazy<int>(func);
            _xIsSet = true;
            return this;
        }
        public ThingWithOnlyParameterizedConstructorBuilder WithoutX()
        {
            WithX(() => default(int));
            _xIsSet = false;
            return this;
        }


        public override ThingWithOnlyParameterizedConstructor Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<ThingWithOnlyParameterizedConstructor>(() =>
                {
                    return new ThingWithOnlyParameterizedConstructor
                    (
                        _x.Value,
                        "f"
                    );
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static ThingWithParameterizedConstructor Default() => new ThingWithParameterizedConstructor();

    }
}
#nullable disable