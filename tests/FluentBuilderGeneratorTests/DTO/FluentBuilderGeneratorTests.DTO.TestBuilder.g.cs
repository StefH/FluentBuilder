//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.6.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class TestBuilder : Builder<FluentBuilderGeneratorTests.DTO.Test>
    {
        private bool _classOnOtherNamespaceListIsSet;
        private Lazy<System.Collections.Generic.List<AbcTest.OtherNamespace.ClassOnOtherNamespace>> _classOnOtherNamespaceList = new Lazy<System.Collections.Generic.List<AbcTest.OtherNamespace.ClassOnOtherNamespace>>(() => new List<AbcTest.OtherNamespace.ClassOnOtherNamespace>());
        public TestBuilder WithClassOnOtherNamespaceList(System.Collections.Generic.List<AbcTest.OtherNamespace.ClassOnOtherNamespace> value) => WithClassOnOtherNamespaceList(() => value);
        public TestBuilder WithClassOnOtherNamespaceList(Func<System.Collections.Generic.List<AbcTest.OtherNamespace.ClassOnOtherNamespace>> func)
        {
            _classOnOtherNamespaceList = new Lazy<System.Collections.Generic.List<AbcTest.OtherNamespace.ClassOnOtherNamespace>>(func);
            _classOnOtherNamespaceListIsSet = true;
            return this;
        }
        public TestBuilder WithClassOnOtherNamespaceList(Action<AbcTest.OtherNamespace.IListClassOnOtherNamespaceBuilder> action, bool useObjectInitializer = true) => WithClassOnOtherNamespaceList(() =>
        {
            var builder = new AbcTest.OtherNamespace.IListClassOnOtherNamespaceBuilder();
            action(builder);
            return (System.Collections.Generic.List<AbcTest.OtherNamespace.ClassOnOtherNamespace>) builder.Build(useObjectInitializer);
        });
        public TestBuilder WithoutClassOnOtherNamespaceList()
        {
            WithClassOnOtherNamespaceList(() => new List<AbcTest.OtherNamespace.ClassOnOtherNamespace>());
            _classOnOtherNamespaceListIsSet = false;
            return this;
        }


        public override Test Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<Test>(() =>
                {
                    Test instance;
                    if (useObjectInitializer)
                    {
                        instance = new Test
                        {
                            ClassOnOtherNamespaceList = _classOnOtherNamespaceList.Value
                        };

                        return instance;
                    }

                    instance = new Test();
                    if (_classOnOtherNamespaceListIsSet) { instance.ClassOnOtherNamespaceList = _classOnOtherNamespaceList.Value; }

                    return instance;
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static Test Default() => new Test();

    }
}
#nullable disable