//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.9.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public static partial class ClassWithFuncAndActionBuilderExtensions
    {
        public static ClassWithFuncAndActionBuilder AsBuilder(this FluentBuilderGeneratorTests.DTO.ClassWithFuncAndAction instance)
        {
            return new ClassWithFuncAndActionBuilder().UsingInstance(instance);
        }
    }

    public partial class ClassWithFuncAndActionBuilder : Builder<FluentBuilderGeneratorTests.DTO.ClassWithFuncAndAction>
    {
        private bool _func1IsSet;
        private Lazy<System.Func<int, string>> _func1 = new Lazy<System.Func<int, string>>(() => new System.Func<int, string>((_) => string.Empty));
        public ClassWithFuncAndActionBuilder WithFunc1(System.Func<int, string> value) => WithFunc1(() => value);
        public ClassWithFuncAndActionBuilder WithFunc1(Func<System.Func<int, string>> func)
        {
            _func1 = new Lazy<System.Func<int, string>>(func);
            _func1IsSet = true;
            return this;
        }
        private bool _func2IsSet;
        private Lazy<System.Func<int, bool, string>> _func2 = new Lazy<System.Func<int, bool, string>>(() => new System.Func<int, bool, string>((_, _) => string.Empty));
        public ClassWithFuncAndActionBuilder WithFunc2(System.Func<int, bool, string> value) => WithFunc2(() => value);
        public ClassWithFuncAndActionBuilder WithFunc2(Func<System.Func<int, bool, string>> func)
        {
            _func2 = new Lazy<System.Func<int, bool, string>>(func);
            _func2IsSet = true;
            return this;
        }
        private bool _funcNullIsSet;
        private Lazy<System.Func<int?, bool?, string?>> _funcNull = new Lazy<System.Func<int?, bool?, string?>>(() => new System.Func<int?, bool?, string?>((_, _) => default(string?)));
        public ClassWithFuncAndActionBuilder WithFuncNull(System.Func<int?, bool?, string?> value) => WithFuncNull(() => value);
        public ClassWithFuncAndActionBuilder WithFuncNull(Func<System.Func<int?, bool?, string?>> func)
        {
            _funcNull = new Lazy<System.Func<int?, bool?, string?>>(func);
            _funcNullIsSet = true;
            return this;
        }
        private bool _actionIsSet;
        private Lazy<System.Action<int>> _action = new Lazy<System.Action<int>>(() => new System.Action<int>((_) => { }));
        public ClassWithFuncAndActionBuilder WithAction(System.Action<int> value) => WithAction(() => value);
        public ClassWithFuncAndActionBuilder WithAction(Func<System.Action<int>> func)
        {
            _action = new Lazy<System.Action<int>>(func);
            _actionIsSet = true;
            return this;
        }

        private bool _Constructor_1844167085_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.ClassWithFuncAndAction> _Constructor_1844167085 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithFuncAndAction>(() => new FluentBuilderGeneratorTests.DTO.ClassWithFuncAndAction());
        public ClassWithFuncAndActionBuilder UsingConstructor()
        {
            _Constructor_1844167085 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithFuncAndAction>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.ClassWithFuncAndAction
                (

                );
            });
            _Constructor_1844167085_IsSet = true;

            return this;
        }


        public ClassWithFuncAndActionBuilder UsingInstance(ClassWithFuncAndAction value) => UsingInstance(() => value);

        public ClassWithFuncAndActionBuilder UsingInstance(Func<ClassWithFuncAndAction> func)
        {
            Instance = new Lazy<ClassWithFuncAndAction>(func);
            return this;
        }

        public override ClassWithFuncAndAction Build() => Build(true);

        public override ClassWithFuncAndAction Build(bool useObjectInitializer)
        {
            if (Instance is null)
            {
                Instance = new Lazy<ClassWithFuncAndAction>(() =>
                {
                    ClassWithFuncAndAction instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassWithFuncAndAction
                        {
                            Func1 = _func1.Value,
                            Func2 = _func2.Value,
                            FuncNull = _funcNull.Value,
                            Action = _action.Value
                        };

                        return instance;
                    }

                    if (_Constructor_1844167085_IsSet) { instance = _Constructor_1844167085.Value; }
                    else { instance = Default(); }

                    return instance;
                });
            }

            if (_func1IsSet) { Instance.Value.Func1 = _func1.Value; }
            if (_func2IsSet) { Instance.Value.Func2 = _func2.Value; }
            if (_funcNullIsSet) { Instance.Value.FuncNull = _funcNull.Value; }
            if (_actionIsSet) { Instance.Value.Action = _action.Value; }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static ClassWithFuncAndAction Default() => new ClassWithFuncAndAction();

    }
}
#nullable disable