//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.8.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ThingWithOnlyParameterizedConstructorsBuilder : Builder<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors>
    {
        private bool _lIsSet;
        private Lazy<long> _l = new Lazy<long>(() => default(long));
        public ThingWithOnlyParameterizedConstructorsBuilder WithL(long value) => WithL(() => value);
        public ThingWithOnlyParameterizedConstructorsBuilder WithL(Func<long> func)
        {
            _l = new Lazy<long>(func);
            _lIsSet = true;
            return this;
        }

        private bool _Constructor696540298_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors> _Constructor696540298 = new Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors>(() => new FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors(default(int)));
        public ThingWithOnlyParameterizedConstructorsBuilder UsingConstructor(int x)
        {
            _Constructor696540298 = new Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors
                (
                    x
                );
            });
            _Constructor696540298_IsSet = true;

            return this;
        }

        private bool _Constructor_931824183_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors> _Constructor_931824183 = new Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors>(() => new FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors(default(long)));
        public ThingWithOnlyParameterizedConstructorsBuilder UsingConstructor(long l)
        {
            _Constructor_931824183 = new Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors
                (
                    l
                );
            });
            _Constructor_931824183_IsSet = true;

            return this;
        }

        private bool _Constructor290739056_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors> _Constructor290739056 = new Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors>(() => new FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors(default(int),default(int),string.Empty));
        public ThingWithOnlyParameterizedConstructorsBuilder UsingConstructor(int x, int y, string z = "test")
        {
            _Constructor290739056 = new Lazy<FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors
                (
                    x, 
                    y, 
                    z
                );
            });
            _Constructor290739056_IsSet = true;

            return this;
        }


        public ThingWithOnlyParameterizedConstructorsBuilder UsingInstance(ThingWithOnlyParameterizedConstructors value) => UsingInstance(() => value);

        public ThingWithOnlyParameterizedConstructorsBuilder UsingInstance(Func<ThingWithOnlyParameterizedConstructors> func)
        {
            Instance = new Lazy<ThingWithOnlyParameterizedConstructors>(func);
            return this;
        }

        public override ThingWithOnlyParameterizedConstructors Build() => Build(false);

        public override ThingWithOnlyParameterizedConstructors Build(bool useObjectInitializer)
        {
            if (Instance is null)
            {
                Instance = new Lazy<ThingWithOnlyParameterizedConstructors>(() =>
                {
                    ThingWithOnlyParameterizedConstructors instance;
                    if (useObjectInitializer)
                    {
                        throw new NotSupportedException("Unable to use the ObjectInitializer for the class 'FluentBuilderGeneratorTests.DTO.ThingWithOnlyParameterizedConstructors' because no public parameterless constructor is defined.");
                    }

                    if (_Constructor290739056_IsSet) { instance = _Constructor290739056.Value; }
                    else if (_Constructor696540298_IsSet) { instance = _Constructor696540298.Value; }
                    else if (_Constructor_931824183_IsSet) { instance = _Constructor_931824183.Value; }
                    else { instance = Default(); }

                    return instance;
                });
            }

            if (_lIsSet) { Instance.Value.L = _l.Value; }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static ThingWithOnlyParameterizedConstructors Default() => new ThingWithOnlyParameterizedConstructors(default(int), default(int), string.Empty);

    }
}
#nullable disable