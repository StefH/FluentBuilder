//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ThingWithConstructorWithItselfBuilder : Builder<FluentBuilderGeneratorTests.DTO.ThingWithConstructorWithItself>
    {
        private bool _firstNameIsSet;
        private Lazy<string> _firstName = new Lazy<string>(() => string.Empty);
        public ThingWithConstructorWithItselfBuilder WithFirstName(string value) => WithFirstName(() => value);
        public ThingWithConstructorWithItselfBuilder WithFirstName(Func<string> func)
        {
            _firstName = new Lazy<string>(func);
            _firstNameIsSet = true;
            return this;
        }
        public ThingWithConstructorWithItselfBuilder WithoutFirstName()
        {
            WithFirstName(() => string.Empty);
            _firstNameIsSet = false;
            return this;
        }

        private bool _lastNameIsSet;
        private Lazy<string> _lastName = new Lazy<string>(() => string.Empty);
        public ThingWithConstructorWithItselfBuilder WithLastName(string value) => WithLastName(() => value);
        public ThingWithConstructorWithItselfBuilder WithLastName(Func<string> func)
        {
            _lastName = new Lazy<string>(func);
            _lastNameIsSet = true;
            return this;
        }
        public ThingWithConstructorWithItselfBuilder WithoutLastName()
        {
            WithLastName(() => string.Empty);
            _lastNameIsSet = false;
            return this;
        }


        public override ThingWithConstructorWithItself Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<ThingWithConstructorWithItself>(() =>
                {
                    if (useObjectInitializer)
                    {
                        return new ThingWithConstructorWithItself
                        {
                            FirstName = _firstName.Value,
                            LastName = _lastName.Value
                        };
                    }

                    var instance = new ThingWithConstructorWithItself();
                    if (_firstNameIsSet) { instance.FirstName = _firstName.Value; }
                    if (_lastNameIsSet) { instance.LastName = _lastName.Value; }
                    return instance;
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static ThingWithConstructorWithItself Default() => new ThingWithConstructorWithItself();

    }
}
#nullable disable