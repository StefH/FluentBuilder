using System;
using FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilder
{
    public partial class UserDtoBuilder : Builder<UserDto>
    {

         private Lazy<> _firstName = new Lazy<>(() => default());

         public UserDtoBuilder WithFirstName( value) => WithFirstName(() => value);

         public UserDtoBuilder WithFirstName(Func<> func)
         {
             _firstName = new Lazy<>(func);

             return this;
         }

         public UserDtoBuilder WithoutFirstName() => WithFirstName(() => default());

         private Lazy<> _lastName = new Lazy<>(() => default());

         public UserDtoBuilder WithLastName( value) => WithLastName(() => value);

         public UserDtoBuilder WithLastName(Func<> func)
         {
             _lastName = new Lazy<>(func);

             return this;
         }

         public UserDtoBuilder WithoutLastName() => WithLastName(() => default());

         private Lazy<> _quitDate = new Lazy<>(() => default());

         public UserDtoBuilder WithQuitDate( value) => WithQuitDate(() => value);

         public UserDtoBuilder WithQuitDate(Func<> func)
         {
             _quitDate = new Lazy<>(func);

             return this;
         }

         public UserDtoBuilder WithoutQuitDate() => WithQuitDate(() => default());

         public override UserDto Build()
         {
             if (Object?.IsValueCreated != true)
             {
                 Object = new Lazy<UserDto>(() => new UserDto
                 {
                        FirstName = _firstName.Value,
                        LastName = _lastName.Value,
                        QuitDate = _quitDate.Value,

                 });
             }

             PostBuild(Object.Value);

             return Object.Value;
         }

         public static UserDto Default() => new UserDto();

    }
}