//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.8.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using AbcTest.OtherNamespace;

namespace AbcTest.OtherNamespace
{
    public partial class ClassOnOtherNamespaceBuilder : Builder<AbcTest.OtherNamespace.ClassOnOtherNamespace>
    {
        private bool _idIsSet;
        private Lazy<int> _id = new Lazy<int>(() => default(int));
        public ClassOnOtherNamespaceBuilder WithId(int value) => WithId(() => value);
        public ClassOnOtherNamespaceBuilder WithId(Func<int> func)
        {
            _id = new Lazy<int>(func);
            _idIsSet = true;
            return this;
        }

        private bool _Constructor1204632294_IsSet;
        private Lazy<AbcTest.OtherNamespace.ClassOnOtherNamespace> _Constructor1204632294 = new Lazy<AbcTest.OtherNamespace.ClassOnOtherNamespace>(() => new AbcTest.OtherNamespace.ClassOnOtherNamespace());
        public ClassOnOtherNamespaceBuilder UsingConstructor()
        {
            _Constructor1204632294 = new Lazy<AbcTest.OtherNamespace.ClassOnOtherNamespace>(() =>
            {
                return new AbcTest.OtherNamespace.ClassOnOtherNamespace
                (

                );
            });
            _Constructor1204632294_IsSet = true;

            return this;
        }


        public ClassOnOtherNamespaceBuilder UsingInstance(ClassOnOtherNamespace value) => UsingInstance(() => value);

        public ClassOnOtherNamespaceBuilder UsingInstance(Func<ClassOnOtherNamespace> func)
        {
            Instance = new Lazy<ClassOnOtherNamespace>(func);
            return this;
        }

        public override ClassOnOtherNamespace Build() => Build(true);

        public override ClassOnOtherNamespace Build(bool useObjectInitializer)
        {
            if (Instance is null)
            {
                Instance = new Lazy<ClassOnOtherNamespace>(() =>
                {
                    ClassOnOtherNamespace instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassOnOtherNamespace
                        {
                            Id = _id.Value
                        };

                        return instance;
                    }

                    if (_Constructor1204632294_IsSet) { instance = _Constructor1204632294.Value; }
                    else { instance = Default(); }

                    return instance;
                });
            }

            if (_idIsSet) { Instance.Value.Id = _id.Value; }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static ClassOnOtherNamespace Default() => new ClassOnOtherNamespace();

    }
}
#nullable disable