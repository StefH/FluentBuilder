//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.10.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public static partial class RecordWithPrimaryConstructorBuilderExtensions
    {
        public static RecordWithPrimaryConstructorBuilder AsBuilder(this FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor instance)
        {
            return new RecordWithPrimaryConstructorBuilder().UsingInstance(instance);
        }
    }

    public partial class RecordWithPrimaryConstructorBuilder : Builder<FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor>
    {
        private Lazy<string> _test = new Lazy<string>(() => string.Empty);
        public RecordWithPrimaryConstructorBuilder WithTest(string value) => WithTest(() => value);
        public RecordWithPrimaryConstructorBuilder WithTest(Func<string> func)
        {
            _test = new Lazy<string>(func);
            return this;
        }
        private Lazy<int> _num = new Lazy<int>(() => default(int));
        public RecordWithPrimaryConstructorBuilder WithNum(int value) => WithNum(() => value);
        public RecordWithPrimaryConstructorBuilder WithNum(Func<int> func)
        {
            _num = new Lazy<int>(func);
            return this;
        }
        private bool _normalIsSet;
        private Lazy<string> _normal = new Lazy<string>(() => string.Empty);
        public RecordWithPrimaryConstructorBuilder WithNormal(string value) => WithNormal(() => value);
        public RecordWithPrimaryConstructorBuilder WithNormal(Func<string> func)
        {
            _normal = new Lazy<string>(func);
            _normalIsSet = true;
            return this;
        }

        private bool _Constructor_380013639_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor> _Constructor_380013639 = new Lazy<FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor>(() => new FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor(string.Empty, default(int)));
        public RecordWithPrimaryConstructorBuilder UsingConstructor(string Test, int Num)
        {
            _Constructor_380013639 = new Lazy<FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor
                (
                    Test, 
                    Num
                );
            });
            _Constructor_380013639_IsSet = true;

            return this;
        }


        public RecordWithPrimaryConstructorBuilder UsingInstance(RecordWithPrimaryConstructor value) => UsingInstance(() => value);

        public RecordWithPrimaryConstructorBuilder UsingInstance(Func<RecordWithPrimaryConstructor> func)
        {
            Instance = new Lazy<RecordWithPrimaryConstructor>(func);
            return this;
        }

        public override RecordWithPrimaryConstructor Build() => Build(false);

        public override RecordWithPrimaryConstructor Build(bool useObjectInitializer)
        {
            if (Instance is null)
            {
                Instance = new Lazy<RecordWithPrimaryConstructor>(() =>
                {
                    RecordWithPrimaryConstructor instance;
                    if (useObjectInitializer)
                    {
                        throw new NotSupportedException("Unable to use the ObjectInitializer for the class 'FluentBuilderGeneratorTests.DTO.RecordWithPrimaryConstructor' because no public parameterless constructor is defined.");
                    }

                    if (_Constructor_380013639_IsSet) { instance = _Constructor_380013639.Value; }
                    else { instance = new RecordWithPrimaryConstructor(_test.Value, _num.Value); }

                    return instance;
                });
            }

            if (_normalIsSet) { Instance.Value.Normal = _normal.Value; }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static RecordWithPrimaryConstructor Default() => new RecordWithPrimaryConstructor(string.Empty, default(int));

    }
}
#nullable disable