//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ClassWithCultureInfoBuilder : Builder<FluentBuilderGeneratorTests.DTO.ClassWithCultureInfo>
    {
        private bool _noValueSetIsSet;
        private Lazy<int> _noValueSet = new Lazy<int>(() => default(int));
        public ClassWithCultureInfoBuilder WithNoValueSet(int value) => WithNoValueSet(() => value);
        public ClassWithCultureInfoBuilder WithNoValueSet(Func<int> func)
        {
            _noValueSet = new Lazy<int>(func);
            _noValueSetIsSet = true;
            return this;
        }
        public ClassWithCultureInfoBuilder WithoutNoValueSet()
        {
            WithNoValueSet(() => default(int));
            _noValueSetIsSet = false;
            return this;
        }

        private bool _localeIsSet;
        private Lazy<System.Globalization.CultureInfo> _locale;// = new Lazy<System.Globalization.CultureInfo>(() => CultureInfo.CurrentCulture);
        public ClassWithCultureInfoBuilder WithLocale(System.Globalization.CultureInfo value) => WithLocale(() => value);
        public ClassWithCultureInfoBuilder WithLocale(Func<System.Globalization.CultureInfo> func)
        {
            _locale = new Lazy<System.Globalization.CultureInfo>(func);
            _localeIsSet = true;
            return this;
        }
        public ClassWithCultureInfoBuilder WithoutLocale()
        {
          //  WithLocale(() => CultureInfo.CurrentCulture);
            _localeIsSet = false;
            return this;
        }


        public override ClassWithCultureInfo Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<ClassWithCultureInfo>(() =>
                {
                    ClassWithCultureInfo instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassWithCultureInfo
                        {
                            NoValueSet = _noValueSet.Value,
                            Locale = _locale.Value
                        };
                        return instance;
                    }

                    instance = new ClassWithCultureInfo();
                    if (_noValueSetIsSet) { instance.NoValueSet = _noValueSet.Value; }
                    if (_localeIsSet) { instance.Locale = _locale.Value; }
                    return instance;
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static ClassWithCultureInfo Default() => new ClassWithCultureInfo();

    }
}
#nullable disable