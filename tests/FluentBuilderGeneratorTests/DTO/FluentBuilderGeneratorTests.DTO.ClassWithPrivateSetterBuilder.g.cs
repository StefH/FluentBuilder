//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.5.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ClassWithPrivateSetterBuilder : Builder<FluentBuilderGeneratorTests.DTO.ClassWithPrivateSetter>
    {
        private bool _publicIntIsSet;
        private Lazy<int> _publicInt = new Lazy<int>(() => default(int));
        public ClassWithPrivateSetterBuilder WithPublicInt(int value) => WithPublicInt(() => value);
        public ClassWithPrivateSetterBuilder WithPublicInt(Func<int> func)
        {
            _publicInt = new Lazy<int>(func);
            _publicIntIsSet = true;
            return this;
        }
        public ClassWithPrivateSetterBuilder WithoutPublicInt()
        {
            WithPublicInt(() => default(int));
            _publicIntIsSet = false;
            return this;
        }


        public override ClassWithPrivateSetter Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<ClassWithPrivateSetter>(() =>
                {
                    ClassWithPrivateSetter instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassWithPrivateSetter
                        {
                            // PublicInt = _publicInt.Value
                        };
                        return instance;
                    }

                    instance = new ClassWithPrivateSetter();
                    //if (_publicIntIsSet) { instance.PublicInt = _publicInt.Value; }
                    return instance;
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static ClassWithPrivateSetter Default() => new ClassWithPrivateSetter();

    }
}
#nullable disable