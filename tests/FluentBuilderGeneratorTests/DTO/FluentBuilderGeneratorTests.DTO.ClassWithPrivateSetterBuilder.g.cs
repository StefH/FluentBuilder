//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.5.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class ClassWithPrivateSetterBuilder : Builder<FluentBuilderGeneratorTests.DTO.ClassWithPrivateSetter>
    {
        private bool _value1IsSet;
        private Lazy<int> _value1 = new Lazy<int>(() => default(int));
        public ClassWithPrivateSetterBuilder WithValue1(int value) => WithValue1(() => value);
        public ClassWithPrivateSetterBuilder WithValue1(Func<int> func)
        {
            _value1 = new Lazy<int>(func);
            _value1IsSet = true;
            return this;
        }
        public ClassWithPrivateSetterBuilder WithoutValue1()
        {
            WithValue1(() => default(int));
            _value1IsSet = false;
            return this;
        }

        private bool _value2IsSet;
        private Lazy<int> _value2 = new Lazy<int>(() => default(int));
        public ClassWithPrivateSetterBuilder WithValue2(int value) => WithValue2(() => value);
        public ClassWithPrivateSetterBuilder WithValue2(Func<int> func)
        {
            _value2 = new Lazy<int>(func);
            _value2IsSet = true;
            return this;
        }
        public ClassWithPrivateSetterBuilder WithoutValue2()
        {
            WithValue2(() => default(int));
            _value2IsSet = false;
            return this;
        }


        private void SetValue1(ClassWithPrivateSetter instance, int value)
        {
            var property = InstanceType.GetProperty("Value1");
            if (property != null)
            {
                property.SetValue(instance, value);
            }
        }

        public override ClassWithPrivateSetter Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<ClassWithPrivateSetter>(() =>
                {
                    ClassWithPrivateSetter instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassWithPrivateSetter
                        {
                            Value2 = _value2.Value
                        };
                        if (_value1IsSet) { SetValue1(instance, _value1.Value); }
                        return instance;
                    }

                    instance = new ClassWithPrivateSetter();
                    if (_value2IsSet) { instance.Value2 = _value2.Value; }
                    if (_value1IsSet) { SetValue1(instance, _value1.Value); }
                    return instance;
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static ClassWithPrivateSetter Default() => new ClassWithPrivateSetter();

    }
}
#nullable disable