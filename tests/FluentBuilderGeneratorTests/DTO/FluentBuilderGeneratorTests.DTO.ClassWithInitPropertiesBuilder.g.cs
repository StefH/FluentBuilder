//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.10.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public static partial class ClassWithInitPropertiesBuilderExtensions
    {
        public static ClassWithInitPropertiesBuilder AsBuilder(this FluentBuilderGeneratorTests.DTO.ClassWithInitProperties instance)
        {
            return new ClassWithInitPropertiesBuilder().UsingInstance(instance);
        }
    }

    public partial class ClassWithInitPropertiesBuilder : Builder<FluentBuilderGeneratorTests.DTO.ClassWithInitProperties>
    {

        private bool _Constructor1040722879_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.ClassWithInitProperties> _Constructor1040722879 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithInitProperties>(() => new FluentBuilderGeneratorTests.DTO.ClassWithInitProperties());
        public ClassWithInitPropertiesBuilder UsingConstructor()
        {
            _Constructor1040722879 = new Lazy<FluentBuilderGeneratorTests.DTO.ClassWithInitProperties>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.ClassWithInitProperties
                (

                );
            });
            _Constructor1040722879_IsSet = true;

            return this;
        }


        public ClassWithInitPropertiesBuilder UsingInstance(ClassWithInitProperties value) => UsingInstance(() => value);

        public ClassWithInitPropertiesBuilder UsingInstance(Func<ClassWithInitProperties> func)
        {
            Instance = new Lazy<ClassWithInitProperties>(func);
            return this;
        }

        public override ClassWithInitProperties Build() => Build(true);

        public override ClassWithInitProperties Build(bool useObjectInitializer)
        {
            if (Instance is null)
            {
                Instance = new Lazy<ClassWithInitProperties>(() =>
                {
                    ClassWithInitProperties instance;
                    if (useObjectInitializer)
                    {
                        instance = new ClassWithInitProperties
                        {

                        };

                        return instance;
                    }

                    if (_Constructor1040722879_IsSet) { instance = _Constructor1040722879.Value; }
                    else { instance = Default(); }

                    return instance;
                });
            }



            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static ClassWithInitProperties Default() => new ClassWithInitProperties();

    }
}
#nullable disable