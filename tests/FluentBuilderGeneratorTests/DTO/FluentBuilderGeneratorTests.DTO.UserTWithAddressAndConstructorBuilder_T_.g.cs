//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public partial class UserTWithAddressAndConstructorBuilder<T> : Builder<FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T>> where T : struct
    {
        private bool _tValueIsSet;
        private Lazy<T> _tValue = new Lazy<T>(() => default(T));
        public UserTWithAddressAndConstructorBuilder<T> WithTValue(T value) => WithTValue(() => value);
        public UserTWithAddressAndConstructorBuilder<T> WithTValue(Func<T> func)
        {
            _tValue = new Lazy<T>(func);
            _tValueIsSet = true;
            return this;
        }
        public UserTWithAddressAndConstructorBuilder<T> WithoutTValue()
        {
            WithTValue(() => default(T));
            _tValueIsSet = false;
            return this;
        }

        private bool _addressIsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.Address<short>> _address = new Lazy<FluentBuilderGeneratorTests.DTO.Address<short>>(() => new FluentBuilderGeneratorTests.DTO.Address<short>());
        public UserTWithAddressAndConstructorBuilder<T> WithAddress(FluentBuilderGeneratorTests.DTO.Address<short> value) => WithAddress(() => value);
        public UserTWithAddressAndConstructorBuilder<T> WithAddress(Func<FluentBuilderGeneratorTests.DTO.Address<short>> func)
        {
            _address = new Lazy<FluentBuilderGeneratorTests.DTO.Address<short>>(func);
            _addressIsSet = true;
            return this;
        }
        public UserTWithAddressAndConstructorBuilder<T> WithAddress(Action<FluentBuilderGeneratorTests.DTO.AddressBuilder<short>> action, bool useObjectInitializer = true) => WithAddress(() =>
        {
            var builder = new FluentBuilderGeneratorTests.DTO.AddressBuilder<short>();
            action(builder);
            return builder.Build(useObjectInitializer);
        });
        public UserTWithAddressAndConstructorBuilder<T> WithoutAddress()
        {
            WithAddress(() => new FluentBuilderGeneratorTests.DTO.Address<short>());
            _addressIsSet = false;
            return this;
        }


        public override UserTWithAddressAndConstructor<T> Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<UserTWithAddressAndConstructor<T>>(() =>
                {
                    if (useObjectInitializer)
                    {
                        return new UserTWithAddressAndConstructor<T>
                        {
                            TValue = _tValue.Value,
                            Address = _address.Value
                        };
                    }

                    var instance = new UserTWithAddressAndConstructor<T>();
                    if (_tValueIsSet) { instance.TValue = _tValue.Value; }
                    if (_addressIsSet) { instance.Address = _address.Value; }
                    return instance;
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }

        public static UserTWithAddressAndConstructor<T> Default() => new UserTWithAddressAndConstructor<T>();

    }
}
#nullable disable