//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version 0.9.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using FluentBuilderGeneratorTests.FluentBuilder;
using FluentBuilderGeneratorTests.DTO;

namespace FluentBuilderGeneratorTests.DTO
{
    public static partial class UserTWithAddressAndConstructorBuilder_T_Extensions
    {
        public static UserTWithAddressAndConstructorBuilder<T> AsBuilder<T>(this FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T> instance) where T : struct
        {
            return new UserTWithAddressAndConstructorBuilder<T>().UsingInstance(instance);
        }
    }

    public partial class UserTWithAddressAndConstructorBuilder<T> : Builder<FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T>> where T : struct
    {
        private bool _tValueIsSet;
        private Lazy<T> _tValue = new Lazy<T>(() => default(T));
        public UserTWithAddressAndConstructorBuilder<T> WithTValue(T value) => WithTValue(() => value);
        public UserTWithAddressAndConstructorBuilder<T> WithTValue(Func<T> func)
        {
            _tValue = new Lazy<T>(func);
            _tValueIsSet = true;
            return this;
        }
        private bool _addressIsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.Address<short>> _address = new Lazy<FluentBuilderGeneratorTests.DTO.Address<short>>(() => new FluentBuilderGeneratorTests.DTO.Address<short>());
        public UserTWithAddressAndConstructorBuilder<T> WithAddress(FluentBuilderGeneratorTests.DTO.Address<short> value) => WithAddress(() => value);
        public UserTWithAddressAndConstructorBuilder<T> WithAddress(Func<FluentBuilderGeneratorTests.DTO.Address<short>> func)
        {
            _address = new Lazy<FluentBuilderGeneratorTests.DTO.Address<short>>(func);
            _addressIsSet = true;
            return this;
        }
        public UserTWithAddressAndConstructorBuilder<T> WithAddress(Action<FluentBuilderGeneratorTests.DTO.AddressBuilder<short>> action, bool useObjectInitializer = true) => WithAddress(() =>
        {
            var builder = new FluentBuilderGeneratorTests.DTO.AddressBuilder<short>();
            action(builder);
            return builder.Build(useObjectInitializer);
        });

        private bool _Constructor1978124393_IsSet;
        private Lazy<FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T>> _Constructor1978124393 = new Lazy<FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T>>(() => new FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T>());
        public UserTWithAddressAndConstructorBuilder<T> UsingConstructor()
        {
            _Constructor1978124393 = new Lazy<FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T>>(() =>
            {
                return new FluentBuilderGeneratorTests.DTO.UserTWithAddressAndConstructor<T>
                (

                );
            });
            _Constructor1978124393_IsSet = true;

            return this;
        }


        public UserTWithAddressAndConstructorBuilder<T> UsingInstance(UserTWithAddressAndConstructor<T> value) => UsingInstance(() => value);

        public UserTWithAddressAndConstructorBuilder<T> UsingInstance(Func<UserTWithAddressAndConstructor<T>> func)
        {
            Instance = new Lazy<UserTWithAddressAndConstructor<T>>(func);
            return this;
        }

        public override UserTWithAddressAndConstructor<T> Build() => Build(true);

        public override UserTWithAddressAndConstructor<T> Build(bool useObjectInitializer)
        {
            if (Instance is null)
            {
                Instance = new Lazy<UserTWithAddressAndConstructor<T>>(() =>
                {
                    UserTWithAddressAndConstructor<T> instance;
                    if (useObjectInitializer)
                    {
                        instance = new UserTWithAddressAndConstructor<T>
                        {
                            TValue = _tValue.Value,
                            Address = _address.Value
                        };

                        return instance;
                    }

                    if (_Constructor1978124393_IsSet) { instance = _Constructor1978124393.Value; }
                    else { instance = Default(); }

                    return instance;
                });
            }

            if (_tValueIsSet) { Instance.Value.TValue = _tValue.Value; }
            if (_addressIsSet) { Instance.Value.Address = _address.Value; }

            PostBuild(Instance.Value);

            return Instance.Value;
        }

        public static UserTWithAddressAndConstructor<T> Default() => new UserTWithAddressAndConstructor<T>();

    }
}
#nullable disable