// This source code is based on https://justsimplycode.com/2020/12/06/auto-generate-builders-using-source-generator-in-net-5
using System.Text;
using FluentBuilderGenerator.Extensions;
using FluentBuilderGenerator.Models;
using FluentBuilderGenerator.SyntaxReceiver;
using FluentBuilderGenerator.Types;
using FluentBuilderGenerator.Wrappers;
using Microsoft.CodeAnalysis;

namespace FluentBuilderGenerator.FileGenerators;

internal class FluentBuilderClassesGenerator : IFilesGenerator
{
    private static readonly FileDataType[] ExtraBuilders =
    {
        FileDataType.ArrayBuilder,
        FileDataType.IEnumerableBuilder,
        FileDataType.IListBuilder,
        FileDataType.ICollectionBuilder
    };

    private readonly IGeneratorExecutionContextWrapper _wrapper;
    private readonly IAutoGenerateBuilderSyntaxReceiver _receiver;
    private readonly bool _supportsNullable;

    public FluentBuilderClassesGenerator(IGeneratorExecutionContextWrapper wrapper, IAutoGenerateBuilderSyntaxReceiver receiver, bool supportsNullable)
    {
        _wrapper = wrapper;
        _receiver = receiver;
        _supportsNullable = supportsNullable;
    }

    public IReadOnlyList<FileData> GenerateFiles()
    {
        var applicableClassSymbols = GetClassSymbols();
        var extraClassSymbols = applicableClassSymbols.ToList();

        var classes = applicableClassSymbols.Select(classSymbol => new FileData
        (
            FileDataType.Builder,
            $"{classSymbol.FullBuilderClassName.Replace('<', '_').Replace('>', '_')}.g.cs",
            CreateClassBuilderCode(classSymbol, extraClassSymbols)
        ));

        // Extra
        var extra = extraClassSymbols
            .Where(e => ExtraBuilders.Contains(e.Type))
            .OrderBy(e => e.Type)
            .Select(classSymbol => new FileData
            (
                classSymbol.Type,
                $"{classSymbol.NamedTypeSymbol.GenerateFileName()}_{classSymbol.Type}.g.cs",
                CreateIEnumerableBuilderCode(classSymbol)
            ));

        return classes.Union(extra).ToList();
    }

    private string CreateIEnumerableBuilderCode(ClassSymbol classSymbol) => $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{(_supportsNullable ? "#nullable enable" : string.Empty)}
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilder;
using {classSymbol.NamedTypeSymbol.ContainingNamespace};

namespace {classSymbol.BuilderNamespace}
{{
    public partial class {classSymbol.BuilderClassName} : {classSymbol.Type}<{classSymbol.NamedTypeSymbol.GenerateClassName()}>{classSymbol.NamedTypeSymbol.GetWhereStatement()}
    {{
{GenerateAddMethods(classSymbol.BuilderClassName, classSymbol.NamedTypeSymbol, _supportsNullable)}
    }}
}}
{(_supportsNullable ? "#nullable disable" : string.Empty)}";

    private string CreateClassBuilderCode(ClassSymbol classSymbol, List<ClassSymbol> allClassSymbols) => $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{(_supportsNullable ? "#nullable enable" : string.Empty)}
using System;
using System.Collections;
using System.Collections.Generic;
using FluentBuilder;
using {classSymbol.NamedTypeSymbol.ContainingNamespace};

namespace {classSymbol.BuilderNamespace}
{{
    public partial class {classSymbol.BuilderClassName} : Builder<{classSymbol.NamedTypeSymbol.GenerateClassName()}>{classSymbol.NamedTypeSymbol.GetWhereStatement()}
    {{
{GenerateWithPropertyCode(classSymbol, allClassSymbols)}
{GenerateBuildMethod(classSymbol)}
    }}
}}
{(_supportsNullable ? "#nullable disable" : string.Empty)}";

    private static string GenerateWithPropertyCode(ClassSymbol classSymbol, List<ClassSymbol> allClassSymbols)
    {
        var properties = GetProperties(classSymbol);
        var className = classSymbol.BuilderClassName;

        var sb = new StringBuilder();
        foreach (var property in properties)
        {
            sb.AppendLine($"        private bool _{CamelCase(property.Name)}IsSet;");

            sb.AppendLine($"        private Lazy<{property.Type}> _{CamelCase(property.Name)} = new Lazy<{property.Type}>(() => default({property.Type}));");

            sb.AppendLine($"        public {className} With{property.Name}({property.Type} value) => With{property.Name}(() => value);");

            sb.Append(GenerateWithPropertyFuncMethod(classSymbol, property));

            sb.Append(GeneratePropertyActionMethodIfApplicable(classSymbol, property, allClassSymbols));

            sb.AppendLine($"        public {className} Without{property.Name}()");
            sb.AppendLine("        {");
            sb.AppendLine($"            With{property.Name}(() => default({property.Type}));");
            sb.AppendLine($"            _{CamelCase(property.Name)}IsSet = false;");
            sb.AppendLine("            return this;");
            sb.AppendLine("        }");
            sb.AppendLine();
        }

        return sb.ToString();
    }

    private static StringBuilder GeneratePropertyActionMethodIfApplicable(
        ClassSymbol classSymbol,
        IPropertySymbol property,
        List<ClassSymbol> allClassSymbols)
    {
        var existingClassSymbol = allClassSymbols.FirstOrDefault(c => c.NamedTypeSymbol.Name == property.Type.Name);
        if (existingClassSymbol is not null)
        {
            return GenerateWithPropertyActionMethod(classSymbol, existingClassSymbol, property);
        }

        if (property.TryGetIDictionaryElementTypes(out var dictionaryTypes))
        {
            return GenerateWithIDictionaryBuilderActionMethod(classSymbol, property, dictionaryTypes);
        }

        if (property.TryGetIEnumerableElementType(out var elementType, out var kind))
        {
            return GenerateWithIEnumerableBuilderActionMethod(kind, classSymbol, property, elementType, allClassSymbols);
        }

        return new StringBuilder();
    }

    private static StringBuilder GenerateWithPropertyFuncMethod(ClassSymbol classSymbol, IPropertySymbol property)
    {
        var className = classSymbol.BuilderClassName;

        var output = new StringBuilder();
        output.AppendLine($"        public {className} With{property.Name}(Func<{property.Type}> func)");
        output.AppendLine("        {");
        output.AppendLine($"            _{CamelCase(property.Name)} = new Lazy<{property.Type}>(func);");
        output.AppendLine($"            _{CamelCase(property.Name)}IsSet = true;");
        output.AppendLine("            return this;");
        output.AppendLine("        }");
        return output;
    }

    private static StringBuilder GenerateWithPropertyActionMethod(ClassSymbol classSymbol, ClassSymbol propertyClassSymbol, IPropertySymbol property)
    {
        var className = classSymbol.BuilderClassName; // hier
        var builderName = propertyClassSymbol.BuilderClassName; // property.Type is INamedTypeSymbol propertyNamedType ? propertyNamedType.GenerateClassName(true) : $"{property.Type.Name}Builder";

        // Replace MyAddressBuilder<T> by MyAddressBuilder<short>
        if (property.Type is INamedTypeSymbol propertyNamedType && builderName.TryGetGenericTypeArguments(out var genericTypeArgumentValue))
        {
            var list = propertyNamedType.TypeArguments.Select(t => t.ToString());
            builderName = builderName.Replace($"<{genericTypeArgumentValue}>", $"<{string.Join(", ", list)}>");
        }

        var sb = new StringBuilder();
        sb.AppendLine($"        public {className} With{property.Name}(Action<{builderName}> action, bool useObjectInitializer = true) => With{property.Name}(() =>");
        sb.AppendLine("        {");
        sb.AppendLine($"            var builder = new {builderName}();");
        sb.AppendLine("            action(builder);");
        sb.AppendLine("            return builder.Build(useObjectInitializer);");
        sb.AppendLine("        });");
        return sb;
    }

    private static StringBuilder GenerateWithIDictionaryBuilderActionMethod(
        ClassSymbol classSymbol,
        IPropertySymbol property,
        (INamedTypeSymbol key, INamedTypeSymbol value)? tuple
    )
    {
        var className = classSymbol.BuilderClassName;

        string types = string.Empty;
        if (tuple != null)
        {
            var keyClassName = tuple.Value.key?.GenerateClassName() ?? "object";
            var valueClassName = tuple.Value.value?.GenerateClassName() ?? "object";

            types = $"{keyClassName}, {valueClassName}";
        }

        string dictionaryBuilderName = $"IDictionaryBuilder{(tuple == null ? string.Empty : "<" + types + ">")}";

        // If the property.Type is an interface, no cast is needed. Else cast the interface to the real type.
        var cast = property.Type.TypeKind == TypeKind.Interface ? "" : $"({property.Type}) ";

        var sb = new StringBuilder();
        sb.AppendLine($"        public {className} With{property.Name}(Action<FluentBuilder.{dictionaryBuilderName}> action, bool useObjectInitializer = true) => With{property.Name}(() =>");
        sb.AppendLine("        {");
        sb.AppendLine($"            var builder = new FluentBuilder.{dictionaryBuilderName}();");
        sb.AppendLine("            action(builder);");
        sb.AppendLine($"            return {cast}builder.Build(useObjectInitializer);");
        sb.AppendLine("        });");
        return sb;
    }

    private static StringBuilder GenerateWithIEnumerableBuilderActionMethod(
        FluentTypeKind kind,
        ClassSymbol classSymbol,
        IPropertySymbol property,
        INamedTypeSymbol? typeSymbol,
        List<ClassSymbol> allClassSymbols)
    {
        var className = classSymbol.BuilderClassName;
        var typeSymbolClassName = typeSymbol?.GenerateClassName();
        var existingClassSymbol = allClassSymbols.FirstOrDefault(c => c.NamedTypeSymbol.Name == typeSymbolClassName);

        string builderName;
        if (existingClassSymbol != null && typeSymbolClassName != null && typeSymbol != null)
        {
            builderName = $"{kind}{typeSymbolClassName}Builder";
            if (allClassSymbols.All(cs => cs.NamedTypeSymbol.Name != builderName))
            {
                var fileDataType = kind.ToFileDataType();
                allClassSymbols.Add(new ClassSymbol
                {
                    Type = fileDataType,
                    BuilderNamespace = existingClassSymbol.BuilderNamespace,
                    BuilderClassName = builderName,
                    FullBuilderClassName = builderName,
                    NamedTypeSymbol = typeSymbol
                });
            }
        }
        else
        {
            // Normal
            builderName = $"{kind}Builder{(typeSymbolClassName == null ? string.Empty : "<" + typeSymbolClassName + ">")}";
        }

        // If the property.Type is an interface or array, no cast is needed. Else cast the interface to the real type.
        var cast = property.Type.TypeKind is TypeKind.Interface or TypeKind.Array ?
            string.Empty :
            $"({property.Type}) ";

        var sb = new StringBuilder();
        sb.AppendLine($"        public {className} With{property.Name}(Action<{builderName}> action, bool useObjectInitializer = true) => With{property.Name}(() =>");
        sb.AppendLine("        {");
        sb.AppendLine($"            var builder = new {builderName}();");
        sb.AppendLine("            action(builder);");
        sb.AppendLine($"            return {cast}builder.Build(useObjectInitializer);");
        sb.AppendLine("        });");
        return sb;
    }

    private static StringBuilder GenerateAddMethods(string className, INamedTypeSymbol itemClassSymbol, bool supportsNullable)
    {
        var itemBuilderName = $"{itemClassSymbol.GenerateClassName(true)}";

        var @override = supportsNullable ? "override" : "new";

        var sb = new StringBuilder();
        sb.AppendLine($"        public {@override} {className} Add({itemClassSymbol.Name} item) => Add(() => item);");

        sb.AppendLine($"        public {@override} {className} Add(Func<{itemClassSymbol.Name}> func)");
        sb.AppendLine("        {");
        sb.AppendLine("            _list.Value.Add(func());");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");

        sb.AppendLine($"        public {className} Add(Action<{itemBuilderName}> action, bool useObjectInitializer = true)");
        sb.AppendLine("        {");
        sb.AppendLine($"            var builder = new {itemBuilderName}();");
        sb.AppendLine("            action(builder);");
        sb.AppendLine("            Add(() => builder.Build(useObjectInitializer));");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        return sb;
    }

    private static IEnumerable<IPropertySymbol> GetProperties(ClassSymbol classSymbol)
    {
        var properties = classSymbol.NamedTypeSymbol.GetMembers().OfType<IPropertySymbol>()
            .Where(x => x.SetMethod is not null)
            .Where(x => x.CanBeReferencedByName)
            .ToList();

        var propertyNames = properties.Select(x => x.Name);

        var baseType = classSymbol.NamedTypeSymbol.BaseType;

        while (baseType != null)
        {
            properties.AddRange(baseType.GetMembers().OfType<IPropertySymbol>()
                .Where(x => x.CanBeReferencedByName)
                .Where(x => x.SetMethod is not null)
                .Where(x => !propertyNames.Contains(x.Name)));

            baseType = baseType.BaseType;
        }

        return properties;
    }

    private static string GenerateBuildMethod(ClassSymbol classSymbol)
    {
        if (classSymbol.NamedTypeSymbol.Constructors.IsEmpty)
        {
            throw new NotSupportedException($"Unable to generate a FluentBuilder for he class '{classSymbol.NamedTypeSymbol}' because no public constructor is defined.");
        }

        var properties = GetProperties(classSymbol).ToArray();
        var output = new StringBuilder();
        var className = classSymbol.NamedTypeSymbol.GenerateClassName();

        output.AppendLine($@"        public override {className} Build(bool useObjectInitializer = true)
        {{
            if (Object?.IsValueCreated != true)
            {{
                Object = new Lazy<{className}>(() =>
                {{
                    if (useObjectInitializer)
                    {{
                        return new {className}
                        {{");
        output.AppendLine(string.Join(",\r\n", properties.Select(property => $@"                            {property.Name} = _{CamelCase(property.Name)}.Value")));
        output.AppendLine($@"                        }};
                    }}

                    var instance = new {className}();");
        output.AppendLine(string.Join("\r\n", properties.Select(property => $@"                    if (_{CamelCase(property.Name)}IsSet) {{ instance.{property.Name} = _{CamelCase(property.Name)}.Value; }}")));
        output.AppendLine($@"                    return instance;
                }});
            }}

            PostBuild(Object.Value);

            return Object.Value;
        }}

        public static {className} Default() => new {className}();");

        return output.ToString();
    }

    private IReadOnlyList<ClassSymbol> GetClassSymbols()
    {
        var classSymbols = new List<ClassSymbol>();
        foreach (var fluentDataItem in _receiver.CandidateFluentDataItems)
        {
            if (_wrapper.TryGetNamedTypeSymbolByFullMetadataName(fluentDataItem, out var classSymbol))
            {
                classSymbols.Add(classSymbol);
            }
        }

        return classSymbols;
    }

    private static string CamelCase(string value) => $"{value.Substring(0, 1).ToLowerInvariant()}{value.Substring(1)}";
}