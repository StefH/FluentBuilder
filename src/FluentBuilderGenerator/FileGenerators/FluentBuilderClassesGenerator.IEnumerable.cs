using System.Text;
using FluentBuilderGenerator.Extensions;
using FluentBuilderGenerator.Helpers;
using FluentBuilderGenerator.Models;
using Microsoft.CodeAnalysis;

namespace FluentBuilderGenerator.FileGenerators;

internal partial class FluentBuilderClassesGenerator
{
    private string CreateIEnumerableBuilderCode(ClassSymbol classSymbol)
    {
        var type = classSymbol.NamedTypeSymbol.ToString();
        var t = IEnumerableBuilderHelper.GetGenericTypeAndToArray(classSymbol.Type, type).GenericType;

        return $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version {System.Reflection.Assembly.GetExecutingAssembly().GetName().Version}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{(_context.SupportsNullable ? "#nullable enable" : string.Empty)}
using System;
using System.Collections;
using System.Collections.Generic;
using {_context.AssemblyName}.FluentBuilder;
using {classSymbol.NamedTypeSymbol.ContainingNamespace};

namespace {classSymbol.BuilderNamespace}
{{
    public partial class {classSymbol.BuilderClassName} : Builder<{t}>
    {{
        private readonly Lazy<List<{type}>> _list = new Lazy<List<{type}>>(() => new List<{type}>());
{GenerateAddMethodsForIEnumerableBuilder(classSymbol.BuilderClassName, classSymbol.NamedTypeSymbol)}

{GenerateBuildMethodForIEnumerableBuilder(classSymbol)}
    }}
}}
{(_context.SupportsNullable ? "#nullable disable" : string.Empty)}";
    }

    private static StringBuilder GenerateAddMethodsForIEnumerableBuilder(string className, INamedTypeSymbol itemClassSymbol)
    {
        var itemBuilderName = $"{itemClassSymbol.GenerateShortTypeName(true)}";

        var sb = new StringBuilder();
        sb.AppendLine($"        public {className} Add({itemClassSymbol.Name} item) => Add(() => item);");

        sb.AppendLine($"        public {className} Add(Func<{itemClassSymbol.Name}> func)");
        sb.AppendLine("        {");
        sb.AppendLine("            _list.Value.Add(func());");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");

        sb.AppendLine($"        public {className} Add(Action<{itemBuilderName}> action, bool useObjectInitializer = true)");
        sb.AppendLine("        {");
        sb.AppendLine($"            var builder = new {itemBuilderName}();");
        sb.AppendLine("            action(builder);");
        sb.AppendLine("            Add(() => builder.Build(useObjectInitializer));");
        sb.AppendLine("            return this;");
        sb.AppendLine("        }");
        return sb;
    }

    private static string GenerateBuildMethodForIEnumerableBuilder(ClassSymbol classSymbol)
    {
        var (genericType, toArray) = IEnumerableBuilderHelper.GetGenericTypeAndToArray(classSymbol.Type, classSymbol.NamedTypeSymbol.ToString());

        return $@"        public override {genericType} Build(bool useObjectInitializer = true)
        {{
            if (Object?.IsValueCreated != true)
            {{
                Object = new Lazy<{genericType}>(() =>
                {{
                    return _list.Value{toArray};
                }});
            }}

            PostBuild(Object.Value);

            return Object.Value;
        }}
";
    }
}