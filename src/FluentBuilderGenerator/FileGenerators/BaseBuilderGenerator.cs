// This source code is based on https://justsimplycode.com/2020/12/06/auto-generate-builders-using-source-generator-in-net-5

using FluentBuilderGenerator.Extensions;
using FluentBuilderGenerator.Models;
using FluentBuilderGenerator.Types;

namespace FluentBuilderGenerator.FileGenerators;

internal class BaseBuilderGenerator : IFileGenerator
{
    private const string Name = "FluentBuilder.BaseBuilder.g.cs";

    private readonly string _assemblyName;
    private readonly bool _supportsNullable;

    public BaseBuilderGenerator(string assemblyName, bool supportsNullable)
    {
        _assemblyName = assemblyName;
        _supportsNullable = supportsNullable;
    }

    public FileData GenerateFile()
    {
        return new FileData
        (
            FileDataType.Base,
            Name,
            $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder version {System.Reflection.Assembly.GetExecutingAssembly().GetName().Version}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{_supportsNullable.IIf("#nullable enable")}
using System;

namespace {_assemblyName}.FluentBuilder
{{
    public abstract class Builder<T>
    {{
        protected Lazy<T>{_supportsNullable.IIf("?")} Instance;

        protected Type InstanceType = typeof(T);

        public abstract T Build();

        public abstract T Build(bool useObjectInitializer);
   
        protected virtual void PostBuild(T value) {{}}
    }}
}}
{_supportsNullable.IIf("#nullable disable")}"
        );
    }
}