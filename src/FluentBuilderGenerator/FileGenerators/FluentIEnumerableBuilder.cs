// This source code is based on https://justsimplycode.com/2020/12/06/auto-generate-builders-using-source-generator-in-net-5
namespace FluentBuilderGenerator.FileGenerators;

internal class FluentIEnumerableBuilder : IFileGenerator
{
    private const string Name = "FluentBuilder.FluentIEnumerableBuilder.g.cs";

    public FileData GenerateFile()
    {
        return new FileData
        {
            FileName = Name,
            Text = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by https://github.com/StefH/FluentBuilder.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace FluentBuilder
{
    public class FluentIEnumerableBuilder<T> : Builder<T[]>
    {
        private readonly Lazy<List<T>> _list = new(() => new List<T>());

        public FluentIEnumerableBuilder<T> With(T item) => With(() => item);
        public FluentIEnumerableBuilder<T> With(Func<T> func)
        {
            _list.Value.Add(func());

            return this;
        }

        public override T[] Build(bool useObjectInitializer = true)
        {
            if (Object?.IsValueCreated != true)
            {
                Object = new Lazy<T[]>(() =>
                {
                    return _list.Value.ToArray();
                });
            }

            PostBuild(Object.Value);

            return Object.Value;
        }
    }
}"
        };
    }
}